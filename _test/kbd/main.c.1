#define F_CPU  1000000UL
//#define F_CPU 8000000UL

#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/power.h>
//#include <avr/cpufunc.h>

#include "../_h/bits.h"
#include "../_h/misc.h"

//#define KEYPAD C /*A*/
//#include "../_h/keypad.h"

#define BAUD  9600
#include "../_h/uart.h"

#define KBD_ERROR  0xFF

#define KBD_DATA_SHIFT  PD2
static const uint8_t KBD_DATA = (1 << KBD_DATA_SHIFT);
static const uint8_t KBD_CLK  = (1 << PD3);

static const uint8_t KBD_CODE_MAP[] = ""
"ÿÿÿÿÿÿÿÿÿÿÿÿÿ\t`ÿ"
"ÿÿÿÿÿq1ÿÿÿzsaw2ÿ"
"ÿcxde43ÿÿ vftr5ÿ"
"ÿnbhgy6ÿÿÿmju78ÿ"
"ÿ,kio09ÿÿ./l;p-ÿ"
"ÿÿ'ÿ[=ÿÿÿÿ\n]ÿ\\ÿÿ"
"ÿÿÿÿÿÿ\bÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"";

static const uint8_t KBD_CODE_MAP_SHIFT[] = ""
"ÿÿÿÿÿÿÿÿÿÿÿÿÿ\t~ÿ"
"ÿÿÿÿÿQ!ÿÿÿZSAW@ÿ"
"ÿCXDE$#ÿÿ VFTR%ÿ"
"ÿNBHGY^ÿÿÿMJU&*ÿ"
"ÿ<KIO)(ÿÿ>?L:P_ÿ"
"ÿÿ\"ÿ{+ÿÿÿÿ\n}ÿ|ÿÿ"
"ÿÿÿÿÿÿ\bÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ"
"";
 
uint8_t getKeyPressed( void ) {
    uint8_t bit, keyCode = 0, parityCalc = 0;
    while ( PIND & KBD_CLK ) {}
    if ( PIND & KBD_DATA ) {
        //printf( "ERROR: KBD_DATA START not present\n\r" );
        return KBD_ERROR;
    }
    while ( !(PIND & KBD_CLK) ) {}
    for( uint8_t i = 0; i < 8; i++ ) {
        while ( PIND & KBD_CLK ) {}
        bit = (PIND & KBD_DATA) >> KBD_DATA_SHIFT;
        keyCode |= bit << i;
        parityCalc += bit;
        while ( !(PIND & KBD_CLK) ) {}
    }
    while ( PIND & KBD_CLK ) {}
    bit = (PIND & KBD_DATA) >> KBD_DATA_SHIFT;
    if ( (parityCalc % 2) == bit ) {
        //printf( "ERROR: parity wrong\n\r" );
        return KBD_ERROR;
    }
    while ( !(PIND & KBD_CLK) ) {}
    while ( PIND & KBD_CLK ) {}
    if ( !(PIND & KBD_DATA) ) {
        //printf( "ERROR: KBD_DATA STOP not present\n\r" );
        return KBD_ERROR;
    }
    while ( !(PIND & KBD_CLK) ) {}
    return keyCode;
}

int main( void ) {
    init();

    power_adc_disable();
    //etc.
    //ADCSRA = 0;
    //xDDR(B) |= (1<< 0 ); // keypad status
    //PORTB = 0;
    DDRD &=~ KBD_DATA;
    DDRD &=~ KBD_CLK;
    PORTD |= KBD_DATA; // open-collector needs pull-ups
    PORTD |= KBD_CLK; // open-collector needs pull-ups

    //while(1) {} // to quickly disable uC code

    uart_init();
    uart_as_stdio();

    puts("\n\rDevice started...\r");

    uint8_t keyNum = KBD_ERROR, keyNumLast = 0xFE;
    bool isShift = false;

    while(1) {
        keyNum = getKeyPressed();
        if ( keyNum == 0xE0 ) { // extended code
            keyNum = getKeyPressed();
            if ( keyNum == 0xF0 ) { // extended code
                keyNum = getKeyPressed();
                //printf( "break ext %x\n\r", keyNum );
            } else {
                //printf( "press ext %x\n\r", keyNum );
            }
        } else if ( keyNum == 0xE1 ) { // Pause
            for( uint8_t i = 7; i > 0; i-- ) { // e1 14 77 e1 f0 14 f0 77
                getKeyPressed();
            } // don't bother checking them
            //printf( "Pause\n\r" );
        } else if ( keyNum == 0xF0 ) {
            keyNum = getKeyPressed();
            switch ( keyNum ) {
                case 0x12:
                case 0x59:
                    isShift = false;
                    break;
            }
            //printf( "break %x\n\r", keyNum );
        } else { // regular code
            //printf( "press %x\n\r", keyNum );
            switch ( keyNum ) {
                case 0x12:
                case 0x59:
                    isShift = true;
                default: {
                    uint8_t key = (isShift ? KBD_CODE_MAP_SHIFT : KBD_CODE_MAP)[keyNum];
                    switch ( key ) {
                        case KBD_ERROR:
                            break;
                        case '\b':
                            putchar( key ); putchar( ' ' ); putchar( key );
                            break;
                        case '\n':
                            putchar( key ); putchar( '\r' );
                            break;
                        default:
                            putchar( key );
                            break;
                    }
                    break;
                }
            }
        }
        //printf( BYTE2BIN_FORMAT"\n\r...\n\r", BYTE2BIN_ARG(xPIN(KEYPAD)) );
        //printf( "%x ", keyNum );
/*
        if ( keyNum != NO_KEY_PRESSED ) {
            //xPORT(B) |= (1<< 0 ); // keypad status
            if ( keyNumLast != keyNum ) {
                //printf( "%c", KEYPAD_KEYCODES3[keyNum] );
                printf( "%x ", keyNum );
                keyNumLast = keyNum;
            }
        } else {
            keyNumLast = keyNum;
            //xPORT(B) &=~(1<< 0 ); // keypad status
        }
*/
    } // while(1)
} // main()
